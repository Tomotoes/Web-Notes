Promise 对象是 CommonJS 工作组提出的一种规范，目的是为异步操作提供统一接口。

那么，什么是Promises？

首先，它是一个对象，也就是说与其他JavaScript对象的用法，没有什么两样；
其次，它起到代理作用（proxy），充当异步操作与回调函数之间的中介。
它使得异步操作具备同步操作的接口，使得程序具备正常的同步运行的流程，回调函数不必再一层层嵌套。

简单说，它的思想是，每一个异步任务立刻返回一个Promise对象，由于是立刻返回，所以可以采用同步操作的流程。
这个Promises对象有一个then方法，允许指定回调函数，在异步任务完成后调用。


总的来说，传统的回调函数写法使得代码混成一团，变得横向发展而不是向下发展。
Promises规范就是为了解决这个问题而提出的，目标是使用正常的程序流程（同步），来处理异步操作。
它先返回一个Promise对象，后面的操作以同步的方式，寄存在这个对象上面。
等到异步操作有了结果，再执行前期寄放在它上面的其他操作。

前面说过，Promise接口的基本思想是，异步任务返回一个Promise对象。

Promise对象只有三种状态。

异步操作“未完成”（pending）
异步操作“已完成”（resolved，又称fulfilled）
异步操作“失败”（rejected）
这三种的状态的变化途径只有两种。

异步操作从“未完成”到“已完成”
异步操作从“未完成”到“失败”。
这种变化只能发生一次，一旦当前状态变为“已完成”或“失败”，就意味着不会再有新的状态变化了。
因此，Promise对象的最终结果只有两种。

异步操作成功，Promise对象传回一个值，状态变为resolved。
异步操作失败，Promise对象抛出一个错误，状态变为rejected。
Promise对象使用then方法添加回调函数。
then方法可以接受两个回调函数，第一个是异步操作成功时（变为resolved状态）时的回调函数，
第二个是异步操作失败（变为rejected）时的回调函数（可以省略）。一旦状态改变，就调用相应的回调函数。