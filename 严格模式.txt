【目的】
设立”严格模式“的目的，主要有以下几个。

明确禁止一些不合理、不严谨的语法，减少JavaScript的一些怪异行为。
增加更多报错的场合，消除代码运行的一些不安全之处，保证代码运行的安全。
提高编译器效率，增加运行速度。
为未来新版本的JavaScript做好铺垫。
“严格模式”体现了JavaScript更合理、更安全、更严谨的发展方向。

【启动方法】  
进入“严格模式”的标志，是一行字符串use strict。 'use strict'

(1)脚本
将use strict放在脚本文件的第一行，则整个脚本都将以“严格模式”运行。
如果这行语句不在第一行就无效，整个脚本会以“正常模式”运行。
<script>
  'use strict';
  console.log('这是严格模式');
</script>

(2)函数
use strict放在函数体的第一行，则整个函数以“严格模式”运行。
function strict() {
  'use strict';
  return '这是严格模式';
}

(3)脚本文件的变通写法
两个不同模式的脚本合并成一个文件，如果严格模式的脚本在前，则合并后的脚本都是”严格模式“；
如果正常模式的脚本在前，则合并后的脚本都是”正常模式“。
总之，这两种情况下，合并后的结果都是不正确的。

【显式报错】

只读属性不可写
严格模式下，设置字符串的length属性，会报错。
严格模式下，对只读属性赋值，或者删除不可配置（nonconfigurable）属性都会报错。

严格模式下，对一个只设置了赋值器（getter）的属性赋值，会报错。

严格模式下，对禁止扩展的对象添加新属性，会报错。

严格模式下，使用eval或者arguments作为标识名，将会报错。
var eval = 17;
var arguments = 17;

函数不能有重名的参数
function f(a, a, b) { // 语法错误
  'use strict';
  return a + b;
}

禁止八进制的前缀0表示法

全局变量显式声明
严格模式下，变量都必须先用var命令声明，然后再使用。

禁止this关键字指向全局对象
正常模式下，函数内部的this可能会指向全局对象，严格模式禁止这种用法，避免无意间创造全局变量。

禁止使用fn.callee、fn.caller
函数内部不得使用fn.caller、fn.arguments，否则会报错。这意味着不能在函数内部得到调用栈了。

禁止使用arguments.callee、arguments.caller

禁止删除变量

禁止使用with语句

创设eval作用域
正常模式下，JavaScript语言有两种变量作用域（scope）：全局作用域和函数作用域。严格模式创设了第三种作用域：eval作用域。
正常模式下，eval语句的作用域，取决于它处于全局作用域，还是函数作用域。严格模式下，eval语句本身就是一个作用域，不再能够在其所运行的作用域创设新的变量了，也就是说，eval所生成的变量只能用于eval内部。

arguments不再追踪参数的变化

非函数代码块不得声明函数
if (true) {
  function f1() { } // 语法错误
}

for (var i = 0; i < 5; i++) {
  function f2() { } // 语法错误
}

为了向将来JavaScript的新版本过渡，严格模式新增了一些保留字：implements, interface, let, package, private, protected, public, static, yield。

使用这些词作为变量名将会报错。



自我总结：

【1】目的就不提了  


【2】使用方法 
针对脚本   放在脚本标签的第一行 
针对方法   放在函数的第一行


【3】根据自身情况 use strict 的作用

1).只读属性不可写

严格模式下，设置字符串的length属性，会报错。
严格模式下，对只读属性赋值，或者删除不可配置（nonconfigurable）属性都会报错。


2).全局变量显式声明

严格模式下，变量都必须先用var命令声明，然后再使用。


3).禁止this关键字指向全局对象

正常模式下，函数内部的this可能会指向全局对象，严格模式禁止这种用法，避免无意间创造全局变量。


4.) 禁止删除变量


x).创设eval作用域

正常模式下，JavaScript语言有两种变量作用域（scope）：全局作用域和函数作用域。
严格模式创设了第三种作用域：eval作用域。
正常模式下，eval语句的作用域，取决于它处于全局作用域，还是函数作用域。
严格模式下，eval语句本身就是一个作用域，不再能够在其所运行的作用域创设新的变量了，
也就是说，eval所生成的变量只能用于eval内部。


5).arguments不再追踪参数的变化


6).非函数代码块不得声明函数
if (true) {
  function f1() { } // 语法错误
}
for (var i = 0; i < 5; i++) {
  function f2() { } // 语法错误
}


7).使用这些词作为变量名将会报错。

implements, interface, let, package, private, protected, public, static, yield。

